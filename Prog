#makeCacheMatrix: This function creates a special “matrix” named "m" as object that can cache its inverse.

makeCacheMatrix <- function(m = matrix(sample(1:100,18),6,6)) {
  j <- NULL
  set <- function(n){
    m <<- n
    j <<- NULL
  }
  get <- function()m
  setInverse <- function(inverse) j <<- inverse
  getInverse <- function() j 
  list(set = set, get = get, 
       setInverse = setInverse, 
       getInverse = getInverse)
}

# cacheSolve: This function computes the inverse of the special “matrix” returned by makeCacheMatrix above. 

cacheSolve <- function(m, ...) {
  ## Return a matrix that is the inverse of 'm'
  j <- m$getInverse ()
  if(!is.null(j)){
    message("getting cached data")
    return(j)
  }
  mat <- m$get()
  j <- solve(mat,...)
  m$setInverse(j)
  j
}

> mymatrix <- makeCacheMatrix(matrix(1:4, 2, 2))
> mymatrix$get()
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> my_matrix$getInverse()
Error: attempt to apply non-function
>  mymatrix$getInverse()
NULL
> mymatrix$getInverse()
NULL
